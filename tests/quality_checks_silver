/*
===============================================================================
Data Quality Checks - Silver Layer
===============================================================================
Script Summary:
    This script validates data in the 'silver' layer for consistency, accuracy, 
    and uniform formatting. The checks performed include:
    - Detecting null or duplicate primary keys.
    - Identifying extra spaces in string fields.
    - Ensuring standardized and consistent values.
    - Validating logical date ranges and sequencing.
    - Verifying consistency between related columns.

Execution Notes:
    - Run these checks once the Silver Layer load process is complete.
    - Any issues flagged should be analyzed and resolved before moving data forward.
===============================================================================
*/

-- ====================================================================
-- Validation on 'silver.crm_cust_info'
-- ====================================================================
-- Ensure primary key values are not null and not repeated
-- Expected Output: No rows returned
SELECT 
    cst_id,
    COUNT(*) 
FROM silver.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

-- Detect leading/trailing spaces in customer keys
-- Expected Output: No rows returned
SELECT 
    cst_key 
FROM silver.crm_cust_info
WHERE cst_key != TRIM(cst_key);

-- Review distinct values for marital status to check consistency
SELECT DISTINCT 
    cst_marital_status 
FROM silver.crm_cust_info;

-- ====================================================================
-- Validation on 'silver.crm_prd_info'
-- ====================================================================
-- Ensure product IDs are unique and not null
-- Expected Output: No rows returned
SELECT 
    prd_id,
    COUNT(*) 
FROM silver.crm_prd_info
GROUP BY prd_id
HAVING COUNT(*) > 1 OR prd_id IS NULL;

-- Detect extra spaces in product names
-- Expected Output: No rows returned
SELECT 
    prd_nm 
FROM silver.crm_prd_info
WHERE prd_nm != TRIM(prd_nm);

-- Identify products with missing or invalid cost values
-- Expected Output: No rows returned
SELECT 
    prd_cost 
FROM silver.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL;

-- Review distinct product lines for consistent naming
SELECT DISTINCT 
    prd_line 
FROM silver.crm_prd_info;

-- Check for products where end date is earlier than start date
-- Expected Output: No rows returned
SELECT 
    * 
FROM silver.crm_prd_info
WHERE prd_end_dt < prd_start_dt;

-- ====================================================================
-- Validation on 'silver.crm_sales_details'
-- ====================================================================
-- Detect invalid due dates (non-YYYYMMDD, out-of-range, or zero)
-- Expected Output: No invalid dates
SELECT 
    NULLIF(sls_due_dt, 0) AS sls_due_dt 
FROM bronze.crm_sales_details
WHERE sls_due_dt <= 0 
    OR LEN(sls_due_dt) != 8 
    OR sls_due_dt > 20500101 
    OR sls_due_dt < 19000101;

-- Ensure order dates are not later than ship/due dates
-- Expected Output: No rows returned
SELECT 
    * 
FROM silver.crm_sales_details
WHERE sls_order_dt > sls_ship_dt 
   OR sls_order_dt > sls_due_dt;

-- Validate sales amount = quantity Ã— price, and check for null/invalids
-- Expected Output: No rows returned
SELECT DISTINCT 
    sls_sales,
    sls_quantity,
    sls_price 
FROM silver.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
   OR sls_sales IS NULL 
   OR sls_quantity IS NULL 
   OR sls_price IS NULL
   OR sls_sales <= 0 
   OR sls_quantity <= 0 
   OR sls_price <= 0
ORDER BY sls_sales, sls_quantity, sls_price;

-- ====================================================================
-- Validation on 'silver.erp_cust_az12'
-- ====================================================================
-- Detect invalid birthdates (outside 1924-01-01 to today)
-- Expected Output: Birthdates only within valid range
SELECT DISTINCT 
    bdate 
FROM silver.erp_cust_az12
WHERE bdate < '1924-01-01' 
   OR bdate > GETDATE();

-- Review distinct gender values for consistency
SELECT DISTINCT 
    gen 
FROM silver.erp_cust_az12;

-- ====================================================================
-- Validation on 'silver.erp_loc_a101'
-- ====================================================================
-- Review country values for standardization
SELECT DISTINCT 
    cntry 
FROM silver.erp_loc_a101
ORDER BY cntry;

-- ====================================================================
-- Validation on 'silver.erp_px_cat_g1v2'
-- ====================================================================
-- Detect leading/trailing spaces in category-related fields
-- Expected Output: No rows returned
SELECT 
    * 
FROM silver.erp_px_cat_g1v2
WHERE cat != TRIM(cat) 
   OR subcat != TRIM(subcat) 
   OR maintenance != TRIM(maintenance);

-- Review distinct maintenance values for consistency
SELECT DISTINCT 
    maintenance 
FROM silver.erp_px_cat_g1v2;
